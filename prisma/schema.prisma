// app/api/checkout/route.ts

import { prisma } from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2023-10-16', // ← Assure-toi que cette version est bien celle supportée
});

export async function POST(req: NextRequest) {
  try {
    const data = await req.json();
    console.log('[API Checkout] Données reçues:', data);

    const { cartItems, addressId, paymentId, totalAmount } = data;

    // Vérification des champs requis
    if (!cartItems || !addressId || !paymentId || !totalAmount) {
      return NextResponse.json(
        { error: 'Données manquantes pour initialiser le paiement' },
        { status: 400 }
      );
    }

    // Récupération de l'user ID depuis les headers
    const userId = req.headers.get('x-user-id');

    if (!userId) {
      return NextResponse.json(
        { error: 'Identifiant utilisateur manquant dans les headers' },
        { status: 401 }
      );
    }

    // Récupération de l'utilisateur et de son stripeCustomerId
    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user || !user.stripeCustomerId) {
      return NextResponse.json(
        { error: 'Client Stripe non trouvé pour cet utilisateur.' },
        { status: 404 }
      );
    }

    // Création du PaymentIntent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(totalAmount * 100), // en centimes
      currency: 'eur',
      customer: user.stripeCustomerId,
      payment_method: paymentId,
      confirm: true,
      metadata: {
        addressId,
        paymentId,
        userId,
      },
    });

    // Réponse positive
    return NextResponse.json({
      success: true,
      message: 'Paiement initialisé avec succès',
      clientSecret: paymentIntent.client_secret,
    });

  } catch (error: any) {
    console.error('[API Checkout] Erreur:', error);
    return NextResponse.json(
      { error: error.message || 'Une erreur est survenue lors du traitement du paiement' },
      { status: 500 }
    );
  }
}
