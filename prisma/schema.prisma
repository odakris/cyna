generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
}

model User {
  id_user            Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  role               Role                @default(CLIENT)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  client             Client?             @relation("UserToClient")
  passwordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  id_user    Int
  user       User     @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}

model Client {
  id_client            Int              @id @default(autoincrement())
  last_name            String
  first_name           String
  email                String           @unique
  id_user              Int?             @unique
  user                 User?            @relation("UserToClient", fields: [id_user], references: [id_user])
  orders               Order[]
  paymentInfo          PaymentInfo[]
  addresses            ClientAddress[]
  chatbotConversations ChatbotConversation[]
}

model Category {
  id_category  Int       @id @default(autoincrement())
  name         String
  description  String
  image        String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  products     Product[]
}

model Product {
  id_product           Int       @id @default(autoincrement())
  name                 String
  description          String    @db.Text
  technical_specs      String    @db.Text
  unit_price           Float
  available            Boolean
  priority_order       Int
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  id_category          Int
  category             Category  @relation(fields: [id_category], references: [id_category])
  image                String
  stock                Int
  orderedProducts      OrderedProduct[]
}

model OrderedProduct {
  id_ordered_product Int      @id @default(autoincrement())
  id_product         Int
  id_order           Int
  product            Product  @relation(fields: [id_product], references: [id_product])
  order              Order    @relation(fields: [id_order], references: [id_order])
}

model Order {
  id_order              Int       @id @default(autoincrement())
  order_date            DateTime
  subscription_type     String
  subscription_duration Int
  total_amount          Float
  order_status          String
  payment_method        String
  last_card_digits      String
  invoice_pdf_url       String
  renewal_date          DateTime
  id_client             Int
  client                Client    @relation(fields: [id_client], references: [id_client])
  orderedProducts       OrderedProduct[]
}

model PaymentInfo {
  id_payment_info    Int     @id @default(autoincrement())
  card_name          String
  last_card_digits   String
  expiration_month   Int
  expiration_year    Int
  is_default_payment Boolean
  id_client          Int
  client             Client  @relation(fields: [id_client], references: [id_client])
}

model ClientAddress {
  id_address          Int      @id @default(autoincrement())
  first_name          String
  last_name           String
  street              String
  additional_info     String?
  postal_code         String
  city                String
  region              String
  country             String
  mobile_phone        String
  is_default_billing  Boolean
  is_default_shipping Boolean
  id_client           Int
  client              Client   @relation(fields: [id_client], references: [id_client])
}

model ChatbotConversation {
  id_chatbot_conversation Int       @id @default(autoincrement())
  conversation_status     String
  start_date              DateTime
  end_date                DateTime?
  user_email              String
  id_client               Int
  client                  Client    @relation(fields: [id_client], references: [id_client])
  messages                ChatbotMessage[]
  escalations             ChatbotEscalation[]
}

model ChatbotMessage {
  id_chatbot_message      Int       @id @default(autoincrement())
  message                 String
  message_type            String
  message_date            DateTime
  id_chatbot_conversation Int
  chatbotConversation     ChatbotConversation @relation(fields: [id_chatbot_conversation], references: [id_chatbot_conversation])
}

model ChatbotEscalation {
  id_chatbot_escalation   Int       @id @default(autoincrement())
  escalation_date         DateTime
  escalation_status       String
  id_chatbot_conversation Int
  chatbotConversation     ChatbotConversation @relation(fields: [id_chatbot_conversation], references: [id_chatbot_conversation])
}

model ContactMessage {
  id_message  Int      @id @default(autoincrement())
  email       String
  subject     String
  message     String
  sent_date   DateTime @default(now())
}